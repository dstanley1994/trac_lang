
Definition of rational numbers

#(PS,Loading examples/ratio.trl...)'

Basics
-------------------------------------------------------------------------------

The format of our rational numbers will be:

numerator/denominator

To work with them we will need a way of extracting the numerator and
denominator from them.  So we need our anonymous data form.  We use the default
values for the segment form to make 0/1 the default rational.  The default
denominator of one also means that whole numbers will be interpreted correctly,
and so can be mixed in with rationals without a problem.

#(DS,numr,(#(segment,1,#(data,/,x),0)))
#(SS,numr,x)'

#(DS,dnmr,(#(segment,2,#(data,/,x),1)))
#(SS,dnmr,x)'

Often we are going to need to pass a rational into a form as a separate
numerator and denominator.  So it will be useful to have a function that
changes a rational into a set of two parameters.  The following will replace
the slash in a rational with a comma.  I could use CL to call the data and
put the comma in the space between segments, but that wouldn't give me my
default denominator of one which makes it possible to mix rationals and
integers.  Also notice that I use the data-current call here, so that I don't
have to duplicate the creation of the temporary data form.

#(DS,argr,(#(segment,1,#(data,/,x),0),#(segment,2,#(data-current),1)))
#(SS,argr,x)'

Next we need a way of reducing fractions to standard form.  

First we have something to reduce the faction by a given value.

#(DS,reduceby,(#(DV,#(numr,x),by)/#(DV,#(dnmr,x),by)))
#(SS,reduceby,x,by)'

Next we have a function to normalize the sign of a fraction.  Notice that if
the denominator is zero, we change the fraction to 0/0, our form for NaN.

#(DS,reducesign,(#(sgn?,denom,numer/denom,0/0,(#(-,numer)/#(-,denom)))))
#(SS,reducesign,numer,denom)'

We need a GCD that's works the same with negative and positive numbers.

#(DS,gcd+,(#(gcd,#(abs,x),#(abs,y))))
#(SS,gcd+,x,y)'

Finally we combine all these functions into one that will put all our rationals
in normal form.

#(DS,reduce,(#(reducesign,#(argr,#(reduceby,x,#(gcd+,#(argr,x)))))))
#(SS,reduce,x)'


Arithmetic
-------------------------------------------------------------------------------

#(DS,[addr],(#(reduce,#(op,#(ML,<a>,<d>),#(ML,<b>,<c>))/#(ML,<b>,<d>))))
#(SS,[addr],op,<a>,<b>,<c>,<d>)'

#(DS,addr,(#([addr],AD,#(argr,x),#(argr,y))))
#(SS,addr,x,y)'

#(DS,subr,(#([addr],SU,#(argr,x),#(argr,y))))
#(SS,subr,x,y)'

#(DS,mulr,(#(reduce,#(ML,#(numr,x),#(numr,y))/#(ML,#(dnmr,x),#(dnmr,y)))))
#(SS,mulr,x,y)'

#(DS,divr,(#(reduce,#(ML,#(numr,x),#(dnmr,y))/#(ML,#(numr,y),#(dnmr,x)))))
#(SS,divr,x,y)'

#(DS,rcpr,(#(dnmr,x)/#(numr,x)))
#(SS,rcpr,x)'


Tests
-------------------------------------------------------------------------------

#(DS,grr,(#(GR,#(ML,#(numr,x),#(dnmr,y)),#(ML,#(numr,y),#(dnmr,x)),(T),(F))))
#(SS,grr,x,y,T,F)'

#(DS,eqnr,(#(and,(eqn,#(numr,x),#(numr,y)),(eqn,#(dnmr,x),#(dnmr,y)),(T),(F))))
#(SS,eqnr,x,y,T,F)'

#(DS,NaN?,(#(eqn,#(dnmr,x),0,(T),(F))))
#(SS,NaN?,x,T,F)'


Now we can use rational numbers, and even mix integers in with them. 
(
    #(subr,1,1/3)              => 2/3
    #(mulr,5/7,14)             => 10/1
    #(grr,5/7,2/3,true,false)  => true
    #(rcpr,2)                  => 1/2
)


#(PS,(success!
))'
